rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ----- Helpers -----
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && (request.auth.token.admin == true); }
    function numberInRange(n, min, max) { return n is number && n >= min && n <= max; }
    function onlyKeysChanged(allowed) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowed);
    }

    // ----- Categories -----
    match /categories/{categoryId} {
      allow read: if true;                          // public read
      allow create, update, delete: if isAdmin();   // admin write
    }

    // ----- Listings -----
    match /categories/{categoryId}/listings/{listingId} {
      allow read: if true;                          // public read
      allow create, update, delete: if isAdmin();   // admin write

      // Anyone can increment searchcount by exactly +1 (and nothing else)
      allow update: if onlyKeysChanged(['searchcount']) &&
                    (request.resource.data.searchcount is number) &&
                    (request.resource.data.searchcount ==
                      (((resource.data.searchcount != null) ? resource.data.searchcount : 0) + 1));
    }

    // ----- Reviews (one per user; doc id == uid) -----
    match /categories/{categoryId}/listings/{listingId}/reviews/{reviewId} {
      allow read: if true; // public read

      allow create: if isSignedIn()
                    && reviewId == request.auth.uid
                    && request.resource.data.uid == request.auth.uid
                    && numberInRange(request.resource.data.rating, 0, 5);

      allow update: if isSignedIn()
                    && reviewId == request.auth.uid
                    && request.resource.data.uid == resource.data.uid
                    && numberInRange(request.resource.data.rating, 0, 5);

      allow delete: if isAdmin() || (isSignedIn() && reviewId == request.auth.uid);
    }

    // ----- Users (keep private) -----
    match /users/{userId} {
      allow read: if isAdmin() || (isSignedIn() && userId == request.auth.uid);
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if isSignedIn()
                    && userId == request.auth.uid
                    && !request.resource.data.keys().hasAny(['admin','role','claims','customClaims']);
      allow delete: if isAdmin();
    }

    // ----- Admin-only area (optional) -----
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // ----- Catch-all: PUBLIC READ for any other collections/subcollections -----
    match /{document=**} {
      allow read: if true;               // public read everywhere else
      allow create, update, delete: if false;  // no writes unless above rules allowed them
    }
  }
}
